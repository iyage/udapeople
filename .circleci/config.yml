version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:8}
       

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          key: frontend-build
      - run: 
          name: Run frontend test
          command: |
                  cd frontend
                  npm install
                  npm run test
                
  test-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build
      - run: 
          name: Run backend test
          command: |
                cd backend
                npm install
                npm run test
            
  scan-frontend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
            key: frontend-build
      - run: 
          name: Run frontend scan
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical

  scan-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache: 
            key: backend-build
        - run: 
            name: Run backend scan
            command: |
                cd backend
                npm install
                npm audit fix --audit-level=critical
                npm audit fix --audit-level=critical --force
                npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            ls  -a ~/
            yum  -y install tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"       
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"  
      - destroy-environment    

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: "34:85:32:41:35:e1:5d:72:97:34:e8:09:b3:26:2b:90"
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
              apk add --update ansible 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml --private-key=udacity.pem    

  run-migrations:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
         name: Run migrations.
         command: |
            cd backend
            npm install
            npm i migrations
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
             then
               curl https://kvdb.io/Q9QTLYgSXm5pmepZYTZSCq/migration_${CIRCLE_WORKFLOW_ID:0:8}  -d '1'
             fi
  deploy-frontend:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/.circleci/ansible/inventory.txt
      - run:
        name: install dependencies.
        command: |
            yum -y install tar gzip
            # yum -y install python3
            # yum -y install nodejs13.8.0
            # yum -y install npm
            # yum -y install ansible   
      - run:
          name: Get backend url
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]